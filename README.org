
* Agda class in ZRH
  heavily based on Conor McBride's [[https://github.com/pigworker/CS410-17][CS410-17]] and [[https://github.com/pigworker/CS410-18][CS410-18]] classes with some parts taken from the other places

* Installation
  Follow the instructions in the [[https://github.com/yanok/agda-zrh/blob/master/README.pigworker.md][Original Readme]]

* Key bindings for Emacs
  [[https://github.com/pigworker/CS410-17/blob/master/lectures/cheat-sheet.txt][Cheat sheet]]

  
** Troubles with some key bindings on Chromebooks
   Some key bindings, most notably C-SPC and C-, and not working on Chromebooks, you might want to remap them to something different.
   TODO: Add elisp snippet.


* Meetings agenda
  
** Oct 31, Programs and Proofs
   We watched [[https://www.youtube.com/watch?v=O4oczQry9Jw][the first video]] in the class

*** Logic and functional programming is the same thing actually! (Curry-Howard isomorphism)
    Slogan: Types are propositions and terms are proofs

*** Some basic data types and their logic interpretation
    
**** Empty type =Zero= is logical False
     =Void= in Haskell, though Haskell is a bit flowed here

**** Record =One= with no fields is logical True
     =()= (Unit) in Haskell

**** Sum type =_+_= is logical or
     =Either= is Haskell

**** Product type =_*_= is logical and
     =(,)= (pair) in Haskell

** Nov 7, More Programs and Proofs
   We haven't really done what I planned for this meeting, so I've moved the agenda to the next one.
 
   I've talked a bit about Agda's syntax for the dependent function types, then the result type depends on the argument value:
   #+begin_src agda
   -- assume we have a type that is computed
   T : Nat -> Set -- doesn't have to be Nat

   dependentFun : (n : Nat) -> T n
   #+end_src

   Then we discussed a bit a comparison function for =Nat= with a richer type:
   #+begin_src agda
   decide-<= : (n m : Nat) -> n <= m + m <= n
   #+end_src
   
** Nov 14, More Programs and Proofs again?
   Please watch [[https://www.youtube.com/watch?v=qcVZxQTouDk][the second video]]

   Also please try to do [[https://github.com/yanok/agda-zrh/blob/master/Exercise/Zero.agda][the zeroth exercise]], I think the most interesting WRT to the first lecture is the 1.2 part, especially 1.2.4 and 1.2.5.

*** Things to discuss about the first lecture
    - So far we haven't introduced anything that goes beyond Haskell, does this mean Haskell embeds a logic too?
    - What kind of logic is it? Can we prove =P + Not P=?
    - In what sense terms are proofs?
    - Why do we call them =+= and =*=, algebra of types.
    - Implicit arguments are just a convenience.
  
*** Second lecture topics

**** More basic proving

**** Implicit arguments

**** =Zero= type eliminator

**** Natural numbers

**** Term normalization

**** Equality type

**** Pattern-matching on evidence, =with=

**** Computing types, "greater or equal" defined by recursion

**** Dependent pair type =Sg=
     It's logical interpretation is existential quantification.

*** Topics to discuss
    
**** Equality
     - Why do we need to think about equality? Do we need it if we don't care about proofs?
     - Definitional vs propositional equality
     - What does propositional equality give us? Looks like it just repeats definitional one
     - Extensionality
     - Can there be other equalities?

**** Recursive vs inductive proposition definition


