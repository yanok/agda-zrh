
* Agda class in ZRH
  heavily based on Conor McBride's [[https://github.com/pigworker/CS410-17][CS410-17]] and [[https://github.com/pigworker/CS410-18][CS410-18]] classes with some parts taken from the other places

* Installation
  Follow the instructions in the [[https://github.com/yanok/agda-zrh/blob/master/README.pigworker.md][Original Readme]]

* Key bindings for Emacs
  [[https://github.com/pigworker/CS410-17/blob/master/lectures/cheat-sheet.txt][Cheat sheet]]

  
** Troubles with some key bindings on Chromebooks
   Some key bindings, most notably C-SPC and C-, and not working on Chromebooks, you might want to remap them to something different.
   TODO: Add elisp snippet.


* Meetings agenda
  
** Oct 31, Programs and Proofs
   We watched [[https://www.youtube.com/watch?v=O4oczQry9Jw][the first video]] in the class

*** Logic and functional programming is the same thing actually! (Curry-Howard isomorphism)
    Slogan: Types are propositions and terms are proofs

*** Some basic data types and their logic interpretation
    
**** Empty type =Zero= is logical False
     =Void= in Haskell, though Haskell is a bit flowed here

**** Record =One= with no fields is logical True
     =()= (Unit) in Haskell

**** Sum type =_+_= is logical or
     =Either= is Haskell

**** Product type =_*_= is logical and
     =(,)= (pair) in Haskell

** Nov 7, More Programs and Proofs
   Please watch [[https://www.youtube.com/watch?v=qcVZxQTouDk][the second video]]

   Also please try to do [[https://github.com/yanok/agda-zrh/blob/master/Exercise/Zero.agda][the zeroth exercise]], I think the most interesting WRT to the first lecture is the 1.2 part, especially 1.2.4 and 1.2.5.

*** Things to discuss about the first lecture
    - So far we haven't introduced anything that goes beyond Haskell, does this mean Haskell embeds a logic too?
    - What kind of logic is it?
    - In what sense terms are proofs?
